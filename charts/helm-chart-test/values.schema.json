{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "http://example.com/example.json",
    "type": "object",
    "title": "IBM Certified Container Software for Sterling Secure Proxy - Engine JSON schema",
    "required": [
        "license",
        "licenseType",
        "image",
        "engineArgs",
        "persistentVolume",
        "secret",
        "serviceAccount"
    ],
    "properties": {
        "license": {
            "$id": "#/properties/license",
            "type": "boolean",
            "title": "SSP - Engine license acceptance",
            "description": "Please accept license after reading it at http://www-03.ibm.com/software/sla/sladb.nsf (L/N: L-BCHE-BXLMPM)",
            "default": false
        },
        "licenseType": {
            "$id": "#/properties/licenseType",
            "type": "string",
            "title": "License edition for IBM Certified Container Software for SSP - Engine",
            "description": "Please provide the license type edition as either prod or non-prod for production or non-production respectively.",
            "default": "prod",
            "examples": [
			    "prod",
                "non-prod"
            ]
        },
		"nameOverride": {
            "$id": "#/properties/nameOverride",
            "type": "string",
            "title": "Name Override",
            "description": "This name will be appended to release name to form the name of the resources created by this chart.",
            "default": ""
        },
        "arch": {
            "$id": "#/properties/arch",
            "type": "string",
            "title": "Worker Node Architecture",
            "description": "Specify the worker node architecture where deployment would be done. The helm chart will try to detect the architecture based on the master node.",
            "default": "amd64",
            "examples": [
                "amd64"
            ]
        },
        "image": {
            "$id": "#/properties/image",
            "type": "object",
            "title": "Container Image Configuration",
            "default": {},            
            "required": [
                "repository",
                "tag",
                "imageSecrets",
                "pullPolicy"
            ],
            "properties": {
                "repository": {
                    "$id": "#/properties/image/properties/repository",
                    "type": "string",
                    "title": "Engine Image Repository",
                    "description": "Specify the container image registry with image name",
                    "default": "cp.icr.io/cp/ibm-ssp-engine/ssp-engine-docker-image"
                },
                "tag": {
                    "$id": "#/properties/image/properties/tag",
                    "type": "string",
                    "title": "Image Tag",
                    "description": "Specify a valid image tag present on registry.",
                    "default": "6.0.2.0.03",
                    "examples": [
                        "6.0.2.0.03",
                        "6.0.2.0.02",
                        "6.0.2.0.01"
                    ]
                },
                "imageSecrets": {
                    "$id": "#/properties/image/properties/imageSecrets",
                    "type": "string",
                    "title": "Image Registry Secret",
                    "description": "Specify the secret to use when pulling the image. Please provide this when using an image from a private registry."
                },
                "pullPolicy": {
                    "$id": "#/properties/image/properties/pullPolicy",
                    "type": "string",
                    "title": "Image Pull Policy",
                    "description": "Specify the image pull policy for containers.",
                    "default": "IfNotPresent",
                    "examples": [
                        "IfNotPresent",
                        "Always",
                        "Never"
                    ]
                },
                "digest": {
                    "$id": "#/properties/image/properties/digest",
                    "type": "object",
                    "title": "Image Digest Details",
                    "default": {},                    
                    "required": [
                        "enabled",
                        "value"
                    ],
                    "properties": {
                        "enabled": {
                            "$id": "#/properties/image/properties/digest/properties/enabled",
                            "type": "boolean",
                            "title": "Digest Enablement",
                            "description": "Enable/disable digest to be used for image pull from registry.",
                            "default": false
                        },
                        "value": {
                            "$id": "#/properties/image/properties/digest/properties/value",
                            "type": "string",
                            "title": "Image Digest Value",
                            "description": "An explanation about the purpose of this instance.",
                            "default": "sha256:d085b88203be74fca5b993e7134640eb8ffb90771a6d950a788b997a7c5f3cd2"
                        }
                    }
                }
            }
        },
		"engineArgs": {
            "$id": "#/properties/engineArgs",
            "type": "object",
            "title": "Engine Configuration Parameters",
			"default": {},
            "required": [
                "keyCertExport",
                "keyCertAliasName",
                "maxHeapSize",
				"signOnDirName"
            ],
            "properties": {
                "keyCertExport": {
                    "$id": "#/properties/engineArgs/properties/keyCertExport",
                    "type": "boolean",
                    "title": "Generate/Import Key Certificate",
                    "description": "Check if you are installing SSP Engine before CM.",
                    "default": false
                },
                "keyCertAliasName": {
                    "$id": "#/properties/engineArgs/properties/keyCertAliasName",
                    "type": "string",
                    "title": "Key Cert Alias",
                    "description": "Specify the key certificate alias name. ",
                    "default": "keycert"
                },
                "maxHeapSize": {
                    "$id": "#/properties/engineArgs/properties/maxHeapSize",
                    "type": "string",
                    "title": "Max Heap Size",
                    "description": "Specify the Engine application JVM heap size.",
                    "default": "2048m"
                },
                "signOnDirName": {
                    "$id": "#/properties/engineArgs/properties/signOnDirName",
                    "type": "string",
                    "title": "Specify SSP Brand Name",
                    "description": "Specify SSP brand name if required else not needed.",
                    "default": "Signon"
                }
            }
        },
        "persistentVolume": {
            "$id": "#/properties/persistentVolume",
            "type": "object",
            "title": "PV and PVC Configuration",
            "default": {},
            "required": [
                "enabled",
                "useDynamicProvisioning",
                "size",
                "accessMode"
            ],
            "properties": {
                "enabled": {
                    "$id": "#/properties/persistentVolume/properties/enabled",
                    "type": "boolean",
                    "title": "Enable/Disable Persistence",
                    "description": "This parameters governs if persistence storage is required or not. Currently, disabling this parameter is not supported.",
                    "default": true
                },
                "useDynamicProvisioning": {
                    "$id": "#/properties/persistentVolume/properties/useDynamicProvisioning",
                    "type": "boolean",
                    "title": "Enable/Disable Dynamic Provisioning",
                    "description": "This parameter governs the enabling disabling of dynamic provisioning in container using storage class.",
                    "default": false
                },
                "existingClaimName": {
                    "$id": "#/properties/persistentVolume/properties/existingClaimName",
                    "type": "string",
                    "title": "Existing Persistent Volume Claim",
                    "description": "Specify the existing persistent Volume claim name to be used for data persistence.",
                    "default": ""
                },
                "labelName": {
                    "$id": "#/properties/persistentVolume/properties/labelName",
                    "type": "string",
                    "title": "Label Name",
                    "description": "Specify the label name for manually created persistent volume resource to be used for this deployment.",
                    "default": "app.kubernetes.io/name"
                },
                "labelValue": {
                    "$id": "#/properties/persistentVolume/properties/labelValue",
                    "type": "string",
                    "title": "Label Value",
                    "description": "Specify the label value for manually created persistent volume resource to be used for this deployment.",
                    "default": "ibm-ssp-engine-pv"
                },
                "storageClassName": {
                    "$id": "#/properties/persistentVolume/properties/storageClassName",
                    "type": "string",
                    "title": "Storage Class Name",
                    "description": "Specify the Storage Class name for dynamic provisioning for data persistence.",
                    "default": "manual"
                },
                "size": {
                    "$id": "#/properties/persistentVolume/properties/size",
                    "type": "string",
                    "title": "Persistent Volume Claim Size",
                    "description": "Specify the claim size to be used for this deployment. Please note that this is minimum requirement for deployment.",
                    "default": "2Gi"
                },
                "accessMode": {
                    "$id": "#/properties/persistentVolume/properties/accessMode",
                    "type": "string",
                    "title": "Access Mode for Persistent Volume Claim",
                    "description": "Specify the access mode for data persistence. Currently, only ReadWriteOnce is supported.",
                    "default": "ReadWriteOnce",
                    "examples": [
                        "ReadWriteOnce"
                    ]
                }
            }
        },
        "storageSecurity": {
            "$id": "#/properties/storageSecurity",
            "type": "object",
            "title": "File System GID - Container Supplemental Group",
            "default": {},
            "properties": {
                "supplementalGroupId": {
                    "$id": "#/properties/storageSecurity/properties/supplementalGroupId",
                    "type": "string",
                    "title": "Container Supplemental Group ID",
                    "description": "Specify the file system group ID for persistent volume.",
                    "default": ""
                }
            }
        },
		"service": {
            "$id": "#/properties/service",
            "type": "object",
            "title": "Service Configuration",
            "default": {},
            "required": [
                "type",                
                "engine"
            ],
            "properties": {
                "type": {
                    "$id": "#/properties/service/properties/type",
                    "type": "string",
                    "title": "Service Type",
                    "description": "Specify the service type to be used to expose the Engine application.",
                    "default": "LoadBalancer",
                    "examples": [
                        "LoadBalancer",
						"NodePort",
                        "ClusterIP"						
                    ]
                },
                "loadBalancerIP": {
                    "$id": "#/properties/service/properties/loadBalancerIP",
                    "type": "string",
                    "title": "Static Load Balancer IP",
                    "description": "Specify a valid static Load Balancer IP, if available to access the Engine application.",
                    "default": ""
                },
                "externalIP": {
                    "$id": "#/properties/service/properties/externalIP",
                    "type": "string",
                    "title": "ExternalIP for Service",
                    "description": "Specify the External IP to access the Engine application.",
                    "default": ""
                },
                "annotations": {
                    "$id": "#/properties/service/properties/annotations",
                    "type": "object",
                    "title": "Service Annotations",
                    "description": "Specify the Service annotations if needed.",
                    "default": {},
                    "additionalProperties": true
                },
                "externalTrafficPolicy": {
                    "$id": "#/properties/service/properties/externalTrafficPolicy",
                    "type": "string",
                    "title": "External Traffic Policy",
                    "description": "Specify the external traffic policy if needed.",
                    "default": ""
                },
                "sessionAffinity": {
                    "$id": "#/properties/service/properties/sessionAffinity",
                    "type": "string",
                    "title": "Session Affinity",
                    "description": "Specify the session affinity.",
                    "default": "ClientIP"
                },
                "engine": {
                    "$id": "#/properties/service/properties/engine",
                    "type": "object",
                    "title": "Engine Port",
                    "default": {},
                    "required": [
                        "servicePort",
                        "containerPort"
                    ],
                    "properties": {
                        "servicePort": {
                            "$id": "#/properties/service/properties/engine/properties/servicePort",
                            "type": "integer",
                            "title": "Engine Service Port",
                            "description": "Specify the engine port number.",
                            "default": 63366
                        },
                        "containerPort": {
                            "$id": "#/properties/service/properties/engine/properties/containerPort",
                            "type": "integer",
                            "title": "Engine Container Port",
                            "description": "Specify the engine container port number and do not change this number if not needed.",
                            "default": 63366
                        }
                    }
                },
                "psMoreSecure": {
                    "$id": "#/properties/service/properties/psMoreSecure",
                    "type": "object",
                    "title": "PS More Secure Port",
                    "default": {},
                    "properties": {
                        "servicePort": {
                            "$id": "#/properties/service/properties/psMoreSecure/properties/servicePort",
                            "type": "integer",
                            "title": "PS More Secure Port",
                            "description": "Specify the PS more secure port if you are configuring PS server and this would be a remote port while configuring more secure perimeter server else not needed."
                        }
                    }
                }
            }
        },
		"service2": {
            "$id": "#/properties/service2",
            "type": "object",
            "title": "Adapter Service Configuration",
            "default": {},
            "properties": {
                "type": {
                    "$id": "#/properties/service2/properties/type",
                    "type": "string",
                    "title": "Service Type",
                    "description": "Specify the service type to be used to expose the adapters.",
                    "default": "LoadBalancer",
                    "examples": [
                        "LoadBalancer",
						"NodePort",
                        "ClusterIP"						
                    ]
                },
                "loadBalancerIP": {
                    "$id": "#/properties/service2/properties/loadBalancerIP",
                    "type": "string",
                    "title": "Static Load Balancer IP",
                    "description": "Specify a valid static Load Balancer IP, if available to access the adapters.",
                    "default": ""
                },
                "externalIP": {
                    "$id": "#/properties/service2/properties/externalIP",
                    "type": "string",
                    "title": "ExternalIP for Service",
                    "description": "Specify the External IP to access the adapters.",
                    "default": ""
                },
                "annotations": {
                    "$id": "#/properties/service2/properties/annotations",
                    "type": "object",
                    "title": "Service Annotations",
                    "description": "Specify the Service annotations if needed.",
                    "default": {},
                    "additionalProperties": true
                },
                "externalTrafficPolicy": {
                    "$id": "#/properties/service2/properties/externalTrafficPolicy",
                    "type": "string",
                    "title": "External Traffic Policy",
                    "description": "Specify the external traffic policy if needed.",
                    "default": ""
                },
                "sessionAffinity": {
                    "$id": "#/properties/service2/properties/sessionAffinity",
                    "type": "string",
                    "title": "Session Affinity",
                    "description": "Specify the session affinity.",
                    "default": "ClientIP"
                },
                "portRanges": {
                    "$id": "#/properties/service2/properties/portRanges",
                    "type": "array",
                    "title": "Adapter Ports Range",
					"description": "Expose adapter ports in range format if you are not using Less Secure Perimeter Server else not needed.",
                    "default": [],
                    "items": {
                        "$id": "#/properties/service2/properties/portRanges/items",
                        "type": "object",
						"properties": {
							"name": { 
							   "type": "string",
							   "title": "Adapter Name",
                               "description": "Specify the adapter name."							
							},
							"portRange": { 
							   "type": "string",
							   "title": "Service Port Range",
                               "description": "Specify the service port range like 30101-30110." 
							},
							"nodePortRange": {
							   "type": "string",
							   "title": "Node Port Range ",
                               "description": "Specify the Node Port range if needed like 30101-30110."
							}
						},
                        "additionalItems": true
                    }
                },
				"ports": {
                    "$id": "#/properties/service2/properties/ports",
                    "type": "array",
                    "title": "Adapter Ports",
					"description": "Expose adapter ports one by one if you are not using Less Secure Perimeter Server else not needed.",
                    "default": [],
                    "items": {
                        "$id": "#/properties/service2/properties/ports/items",
                        "type": "object",
						"properties": {
							"name": { 
							   "type": "string",
							   "title": "Adapter Name",
                               "description": "Specify the name name"							
							},
							"portRange": { 
							   "type": "integer",
							   "title": "Service Port",
                               "description": "Specify the service port." 
							},
							"nodePortRange": {
							   "type": "integer",
							   "title": "Node Port",
                               "description": "Specify the Node Port if needed."
							}
						},
                        "additionalItems": true
                    }
                }
            }
        },
        "secret": {
            "$id": "#/properties/secret",
            "type": "object",
            "title": "Secret Configuration",
            "default": {},
            "required": [
                "secretName"
            ],
            "properties": {
                "secretName": {
                    "$id": "#/properties/secret/properties/secretName",
                    "type": "string",
                    "title": "Engine Secret Name",
                    "description": "Specify the secret name which is created as prerequisite for this deployment.",
                    "default": ""
                },
                "keyCertSecretName": {
                    "$id": "#/properties/secret/properties/keyCertSecretName",
                    "type": "string",
                    "title": "Key Certificate Secret Name",
                    "description": "Specify the key certificate secret name if you are installing Engine after CM otherwise it's not needed",
                    "default": ""
                }
            }
        },
        "serviceAccount": {
            "$id": "#/properties/serviceAccount",
            "type": "object",
            "title": "Service Account Configuration",
            "default": {},
            "required": [
                "create"
            ],
            "properties": {
                "create": {
                    "$id": "#/properties/serviceAccount/properties/create",
                    "type": "boolean",
                    "title": "Service Account Create",
                    "description": "UnCheck if you want to use existing service account.",
                    "default": true
                },
                "name": {
                    "$id": "#/properties/serviceAccount/properties/name",
                    "type": "string",
                    "title": "Service Account Name",
                    "description": "Specify service account name if existing service account is to be use for this deployment.",
                    "default": ""
                }
            }
        },
		"resources": {
            "$id": "#/properties/resources",
            "type": "object",
            "title": "Resource Configuration",
            "default": {},
            "required": [
                "limits",
                "requests"
            ],
            "properties": {
                "limits": {
                    "$id": "#/properties/resources/properties/limits",
                    "type": "object",
                    "title": "Resource Limits",
                    "default": {},
                    "required": [
                        "cpu",
                        "memory"
                    ],
                    "properties": {
                        "cpu": {
                            "$id": "#/properties/resources/properties/limits/properties/cpu",
                            "type": "string",
                            "title": "CPU Limit",
                            "description": "The upper limit of CPU core. Specify integers, fractions (e.g. 0.5), or millicores values(e.g. 1000m, where 1000m is equivalent to 1 core).",
                            "default": "1000m"
                        },
                        "memory": {
                            "$id": "#/properties/resources/properties/limits/properties/memory",
                            "type": "string",
                            "title": "Memory Limit",
                            "description": "The memory upper limit in bytes. Specify integers with suffixes: E, P, T, G, M, K, or power-of-two equivalents: Ei, Pi, Ti, Gi, Mi, Ki.",
                            "default": "3Gi"
                        }
                    }
                },
                "requests": {
                    "$id": "#/properties/resources/properties/requests",
                    "type": "object",
                    "title": "Request Limits",
                    "default": {},
                    "required": [
                        "cpu",
                        "memory"
                    ],
                    "properties": {
                        "cpu": {
                            "$id": "#/properties/resources/properties/requests/properties/cpu",
                            "type": "string",
                            "title": "CPU Request",
                            "description": "The upper limit of CPU core. Specify integers, fractions (e.g. 0.5), or millicores values(e.g. 1000m, where 1000m is equivalent to 1 core).",
                            "default": "1000m"
                        },
                        "memory": {
                            "$id": "#/properties/resources/properties/requests/properties/memory",
                            "type": "string",
                            "title": "Memory Request",
                            "description": "The memory upper limit in bytes. Specify integers with suffixes: E, P, T, G, M, K, or power-of-two equivalents: Ei, Pi, Ti, Gi, Mi, Ki.",
                            "default": "3Gi"
                        }
                    }
                }
            }
        },
		"affinity": {
            "$id": "#/properties/affinity",
            "type": "object",
            "title": "Affinity Configuration",
            "default": {},
            "required": [
                "nodeAffinity"
            ],
            "properties": {
                "nodeAffinity": {
                    "$id": "#/properties/affinity/properties/nodeAffinity",
                    "type": "object",
                    "title": "Node Affinity",
                    "default": {},
                    "required": [
                        "requiredDuringSchedulingIgnoredDuringExecution",
                        "preferredDuringSchedulingIgnoredDuringExecution"
                    ],
                    "properties": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/nodeAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Node Affinity RequiredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/nodeAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        },
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/nodeAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Node Affinity PreferredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/nodeAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        }
                    }
                },
                "podAffinity": {
                    "$id": "#/properties/affinity/properties/podAffinity",
                    "type": "object",
                    "title": "Pod Affinity",
                    "default": {},
                    "required": [
                        "requiredDuringSchedulingIgnoredDuringExecution",
                        "preferredDuringSchedulingIgnoredDuringExecution"
                    ],
                    "properties": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/podAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Pod Affinity RequiredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.podAffinity.requiredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/podAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        },
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/podAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Pod Affinity PreferredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.podAffinity.preferredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/podAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        }
                    }
                },
                "podAntiAffinity": {
                    "$id": "#/properties/affinity/properties/podAntiAffinity",
                    "type": "object",
                    "title": "Pod Anti-Affinity",
                    "default": {},
                    "required": [
                        "requiredDuringSchedulingIgnoredDuringExecution",
                        "preferredDuringSchedulingIgnoredDuringExecution"
                    ],
                    "properties": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/podAntiAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Pod Anti-Affinity RequiredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/podAntiAffinity/properties/requiredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        },
                        "preferredDuringSchedulingIgnoredDuringExecution": {
                            "$id": "#/properties/affinity/properties/podAntiAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution",
                            "type": "array",
                            "title": "Pod Anti-Affinity PreferredDuringSchedulingIgnoredDuringExecution",
                            "description": "Specify in accordance with k8s PodSpec.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution",
                            "default": [],
                            "additionalItems": true,
                            "items": {
                                "$id": "#/properties/affinity/properties/podAntiAffinity/properties/preferredDuringSchedulingIgnoredDuringExecution/items",
								"type": "object",
				                "additionalItems": true
                            }
                        }
                    }
                }
            }
        },
		"livenessProbe": {
            "$id": "#/properties/livenessProbe",
            "type": "object",
            "title": "Liveness Probe Configuration",
            "required": [
                "initialDelaySeconds",
                "timeoutSeconds",
                "periodSeconds",
				"failureThreshold"
            ],
            "properties": {
                "initialDelaySeconds": {
                    "$id": "#/properties/livenessProbe/properties/initialDelaySeconds",
                    "type": "integer",
                    "title": "Initial Delay",
                    "description": "Specify the initial delay in starting liveness probe in seconds",
                    "default": 200
                },
                "timeoutSeconds": {
                    "$id": "#/properties/livenessProbe/properties/timeoutSeconds",
                    "type": "integer",
                    "title": "Timeout",
                    "description": "Specify the probe timeout in seconds",
                    "default": 30
                },
                "periodSeconds": {
                    "$id": "#/properties/livenessProbe/properties/periodSeconds",
                    "type": "integer",
                    "title": "Period",
                    "description": "Specify the time period between two probes in seconds",
                    "default": 60
                },
				"failureThreshold": {
                    "$id": "#/properties/livenessProbe/properties/failureThreshold",
                    "type": "integer",
                    "title": "Failure Threshold",
                    "description": "Specify the failure threshold count.",
                    "default": 10
                }
            }
        },
        "readinessProbe": {
            "$id": "#/properties/readinessProbe",
            "type": "object",
            "title": "Readiness Probe Configuration",
            "required": [
                "initialDelaySeconds",
                "timeoutSeconds",
                "periodSeconds",
				"failureThreshold"
            ],
            "properties": {
                "initialDelaySeconds": {
                    "$id": "#/properties/readinessProbe/properties/initialDelaySeconds",
                    "type": "integer",
                    "title": "Initial Delay",
                    "description": "Specify the initial delay in starting readiness probe in seconds.",
                    "default": 190
                },
                "timeoutSeconds": {
                    "$id": "#/properties/readinessProbe/properties/timeoutSeconds",
                    "type": "integer",
                    "title": "Timeout",
                    "description": "Specify the probe timeout in seconds.",
                    "default": 5
                },
                "periodSeconds": {
                    "$id": "#/properties/readinessProbe/properties/periodSeconds",
                    "type": "integer",
                    "title": "Time Period",
                    "description": "Specify the time period between two probes in seconds.",
                    "default": 60
                },
				"failureThreshold": {
                    "$id": "#/properties/livenessProbe/properties/failureThreshold",
                    "type": "integer",
                    "title": "Failure Threshold",
                    "description": "Specify the failure threshold count.",
                    "default": 10
                }
            }
        },
        "route": {
            "$id": "#/properties/route",
            "type": "object",
            "title": "OpenShift Route Configuration",
            "required": [
                "enabled"
            ],
            "properties": {
                "enabled": {
                    "$id": "#/properties/route/properties/enabled",
                    "type": "boolean",
                    "title": "Enable/Disable OpenShift Route",
                    "description": "Check if you want to enable OpenShift route creation.",
                    "default": false
                }
            }
        },
        "dashboard": {
            "$id": "#/properties/dashboard",
            "type": "object",
            "title": "Dashboard Monitoring",
            "properties": {
                "enabled": {
                    "$id": "#/properties/dashboard/properties/enabled",
                    "type": "boolean",
                    "title": "Enable/Disable Dashboard",
                    "description": "Enable/Disable dashboard monitoring",
                    "default": false
                }
            }
        },
        "customProperties": {
            "$id": "#/properties/customProperties",
            "type": "array",
            "title": "Properties File Configuration",
            "description": "Specify the custom properties if you want to add/modify the following properties files: bin/log.properties, bin/security.properties, bin/perimeter.properties, bin/cdsp.properties, bin/portal/mediatypes.properties, bin/portal/pages.properties, conf/log4j.properties and for this you need to pass property in key and value format: <File Name Without Extension>_<Property Name>=<Property Value>. For Example: log_audit.log.maxfilesize=10MB",
			"items": {
				"$id": "#/properties/customProperties/items",
				"type": "string",
				"additionalItems": true
			}
        },
        "vmArguments": {
            "$id": "#/properties/vmArguments",
            "type": "array",
            "title": "VM Argument Configuration",
            "description": "Specify VM arguments. For Example Djavax.net.debug=ssl,handshake,data,trustmanager",
            "items": {
				"$id": "#/properties/vmArguments/items",
				"type": "string",
				"additionalItems": true
			}
        },
        "customCertificate": {
            "$id": "#/properties/customCertificate",
            "type": "object",
            "title": "Custom Certificate Configuration",
            "description": "Use this if you want to import custom certificate which was exported from the CM.",
            "default": {},
            "required": [
                "customCertEnabled",
                "commonCertAlias",
                "commonKeyCertFile"
            ],
            "properties": {
                "customCertEnabled": {
                    "$id": "#/properties/customCertificate/properties/customCertEnabled",
                    "type": "boolean",
                    "title": "Enable/Disable Custom Certificate",
                    "description": "Check if you want to enable the custom certificate option.",
                    "default": false
                },
                "commonCertAlias": {
                    "$id": "#/properties/customCertificate/properties/commonCertAlias",
                    "type": "string",
                    "title": "Certificate Alias",
                    "description": "Specify the certificate alias name.",
                    "default": ""
                },
                "commonKeyCertFile": {
                    "$id": "#/properties/customCertificate/properties/commonKeyCertFile",
                    "type": "string",
                    "title": "Certificate File Name",
                    "description": "Specify the certificate file name which was exported from the CM and First you need to create the directory with 'ENG_RESOURCES' name in PV if it is not available and place the key certificate file in 'ENG_RESOURCES' directory",
                    "default": ""
                }
            }
        },
        "customFiles": {
            "$id": "#/properties/customFiles",
            "type": "array",
            "title": "Custom Directory/File Configuration",
            "description": "Specify the custom directories/files if you want map inside container and for this you need to specify full path of the file or directory and First you need to create the directory with 'ENG_RESOURCES' name in PV if it is not available and place the custom directories/files in 'ENG_RESOURCES' directory. For example: /conf/log4j2.xml, /bin/aspera.conf and /Signon etc.",
            "items": {
				"$id": "#/properties/customFiles/items",
				"type": "string",
				"additionalItems": true
			}
        },
		"networkPolicy": {
            "$id": "#/properties/networkPolicy",
            "type": "object",
            "title": "Network Policy Configuration",        
            "default": {},
            "required": [
                "policyTypes"               
            ],
            "properties": {
                "policyTypes": {
                    "$id": "#/properties/networkPolicy/properties/policyTypes",
                    "type": "array",
                    "title": "Policy Type",
                    "description": "Specify the policy type.",
					"additionalItems": false,
					"items": {
                        "$id": "#/properties/networkPolicy/properties/policyTypes/items",
                        "type": "string"
                    }
                },
                "ingress": {
                    "$id": "#/properties/networkPolicy/properties/ingress",
                    "type": "array",
                    "title": "Ingress Configure",
                    "description": "Specify the ingress configuration",
                    "items": {
                        "$id": "#/properties/networkPolicy/properties/ingress/items",
                        "type": "object",
                        "additionalItems": true
                    }
                },
                "egress": {
					"$id": "#/properties/networkPolicy/properties/egress",
					"type": "array",
					"title": "Egress Configure",
					"description": "Specify the egress configuration",
					"items": {
						"$id": "#/properties/networkPolicy/properties/egress/items",
						"type": "object",
						"additionalItems": true
					}
				}
			}
		}
     },
	 "additionalProperties": true
 }